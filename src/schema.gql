# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Post {
  id: Int!
  content: String
  userId: Int!
  createdAt: DateTime!
  images: [String!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: Int!
  content: String!
  postId: Int!
  userId: Int!
  createdAt: DateTime!
}

type User {
  id: Int!
  userName: String!
  avatar: String!
  bio: String
  phone: String!
  email: String!
  password: String!
}

type AuthResponse {
  user: User!
  token: String!
}

type PostResponsee {
  id: Float!
  content: String!
  user: User!
  likes: Float!
  comments: [Comment!]
  images: [String!]!
  createdAt: DateTime!
}

type MessageOutput {
  id: Float!
  content: String!
  Isread: Boolean!
  sender: User!
  receive: User!
  createdAt: DateTime!
}

type PostMentionResponsee {
  id: Float!
  mentionFrom: User!
  mentionTo: User!
  post: Post!
  createdAt: DateTime!
}

type CommentMentionResponsee {
  id: Float!
  username: String!
  mentionTo: Float!
  comment: Comment!
  createdAt: DateTime!
}

type CommentResponsee {
  id: Float!
  content: String!
  post: Post!
  user: User!
  createdAt: DateTime!
}

type ReplyResponsee {
  id: Float!
  content: String!
  comment: Comment!
  user: User!
  createdAt: DateTime!
}

type RelationResponseOutput {
  follower: User!
  following: User!
  status: String!
}

type PostHastageResponse {
  id: Float!
  content: String!
  post: PostResponsee!
  user: User!
  createdAt: DateTime!
}

type CommentHastageResponse {
  id: Float!
  content: String!
  comment: CommentResponsee!
  user: User!
  createdAt: DateTime!
}

type ReplyHastageResponse {
  id: Float!
  content: String!
  reply: ReplyResponsee!
  user: User!
  createdAt: DateTime!
}

type NotificationOutput {
  id: Float!
  Isread: Boolean!
  sender: User!
  receive: User!
  createdAt: DateTime!
}

type Query {
  sayHello: String!
  getUserById(id: Float!): User!
  getUserByEmail(email: CheckEmail!): User!
  getUserByUserName(userName: String!): User!
  deleteUser: String!
  getAllNotifications: [NotificationOutput!]!
  getNotificationById(id: Int!): NotificationOutput!
  userNotifications: [NotificationOutput!]!
  unreadNotifications(receiverId: Int!): [NotificationOutput!]!
  getPostById(id: Int!): PostResponsee!
  searchPosts(content: String, pagination: PaginationDto): [PostResponsee!]!
  getUserPosts: [PostResponsee!]!
  isPostLiked(postId: Int!): Boolean!
  likedUser(pagination: PaginationDto): [PostResponsee!]!
  postLikeCount(postId: Int!): Int!
  hasLikedComment(commentId: Int!): Boolean!
  getUserLikedComments(pagination: PaginationDto): [Comment!]!
  getCommentLikesCount(commentId: Int!): Int!
  getRelationStatus(followingId: Float!): String!
  getFollowers(userName: String!): [RelationResponseOutput!]!
  getFollowings(userName: String!): [RelationResponseOutput!]!
  getFriends: [RelationResponseOutput!]!
  getComment(postId: Int!, content: String!): CommentResponsee!
  getCommentsForPost(postId: Int!): [CommentResponsee!]!
  getCountCommentPost(postId: Int!): Int!
  getCommentsByUserOnPost(postId: Int!): [CommentResponsee!]!
  getCommentsByUser: [CommentResponsee!]!
  getLastComments(postId: Int!, pagination: PaginationDto): [CommentResponsee!]!
  getUserByComment(commentId: Int!): User!
  getPostByComment(commentId: Int!): Post!
  getReply(commentId: Float!, content: String!): ReplyResponsee!
  getRepliesByComment(commentId: Float!): [ReplyResponsee!]!
  getRepliesCount(commentId: Float!): Float!
  getRepliesByUser: [ReplyResponsee!]!
  getLastReplies(commentId: Float!, paginationDto: PaginationDto!): [ReplyResponsee!]!
  getUserByReply(id: Float!): User!
  chat(userName: String!): [MessageOutput!]!
  userMessages: [MessageOutput!]!
  unreadMessages(receiverId: Int!): [MessageOutput!]!
  getPostMention(userName: String!, postId: Int!): PostMentionResponsee!
  postMentionsToUser: [PostMentionResponsee!]!
  postMentionsFromUser: [PostMentionResponsee!]!
  mentionsForPost(postId: Int!): [PostMentionResponsee!]!
  isUserPostMentioned(postId: Int!, userName: String!): Boolean!
  getCommentMention(userName: String!, commentId: Int!): CommentMentionResponsee!
  getCommentMentionsToUser: [CommentMentionResponsee!]!
  getCommentMentionsFromUser: [CommentMentionResponsee!]!
  getCommentMentionsForComment(commentId: Int!): [CommentMentionResponsee!]!
  isUserMentionedInComment(commentId: Int!, userName: String!): Boolean!
  findPostByHashtag(content: String!): PostHastageResponse!
  findAllPostHashtags(postId: Float!, limit: Float! = 10, skip: Float! = 0): [PostHastageResponse!]!
  findAllUserHashtagOnPost(limit: Float! = 10, skip: Float! = 0): [PostHastageResponse!]!
  findCommentByHashtag(content: String!): CommentHastageResponse!
  findAllCommentHashtags(commentId: Float!, limit: Float! = 10, skip: Float! = 0): [CommentHastageResponse!]!
  findAllUserHashtagsOnComments(limit: Float! = 10, skip: Float! = 0): [CommentHastageResponse!]!
  findReplyHashtag(content: String!): ReplyHastageResponse
  findAllReplyHashtags(replyId: Int!, limit: Int, skip: Int): [ReplyHastageResponse!]!
  findAllUserHashtagOnReply(limit: Int, skip: Int): [ReplyHastageResponse!]!
}

input CheckEmail {
  email: String!
}

input PaginationDto {
  limit: Int
  offset: Int
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!, avatar: CreateImagDto!): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword(checkEmail: CheckEmail!): String!
  resetPassword(resetPasswordDto: ResetPasswordDto!): String!
  changePassword(changePasswordDto: ChangePasswordDto!): String!
  adminLogin(loginDto: LoginDto!): AuthResponse!
  managerLogin(loginDto: LoginDto!): AuthResponse!
  logout: Boolean!
  updateUser(updateUserDto: UpdateUserDto!): User!
  UpdateUserRole(checkEmail: CheckEmail!, companyId: Float!): String!
  sendNotification(createNotificationDto: CreateNotificationDto!): NotificationOutput!
  markNotificationAsRead(userName: String!): String!
  markAllNotificationsAsRead(userName: String!): String!
  deleteNotification(id: Int!): String!
  deleteAllNotifications: String!
  createPost(content: String, images: [CreateImagDto!]): PostResponsee!
  updatePost(id: Int!, content: String!): PostResponsee!
  deletePost(id: Int!): String!
  likePost(postId: Int!): String!
  unlikePost(postId: Int!): String!
  likeComment(commentId: Int!): String!
  unlikeComment(commentId: Int!): String!
  followUser(userName: String!): String!
  unfollowingUser(userName: String!): String!
  acceptFollowRequest(userName: String!, status: Boolean!): String!
  writeComment(postId: Int!, content: String!): CommentResponsee!
  updateComment(commentId: Int!, content: String!): String!
  deleteComment(commentId: Int!): String!
  writeReply(commentId: Float!, content: String!): ReplyResponsee!
  updateReply(id: Float!, content: String!): String!
  deleteReply(id: Float!): String!
  sendMessage(createMessageDto: CreateMessageDto!): MessageOutput!
  markMessageAsRead(userName: String!): String!
  deleteMessage(id: Int!): String!
  createPostMention(userName: String!, postId: Int!): PostMentionResponsee!
  deletePostMention(userName: String!, postId: Int!): String!
  createCommentMention(userName: String!, commentId: Int!): CommentMentionResponsee!
  deleteCommentMention(userName: String!, commentId: Int!): String!
  createHashtagPost(postId: Float!, content: String!): PostHastageResponse!
  updateHashtagPost(id: Float!, postId: Float!, content: String!): PostHastageResponse!
  createHashtagComment(commentId: Float!, content: String!): CommentHastageResponse!
  updateHashtagComment(id: Float!, commentId: Float!, content: String!): CommentHastageResponse!
  createHashtagReply(replyId: Int!, content: String!): ReplyHastageResponse!
  updateHashtagReply(id: Int!, replyId: Int!, content: String!): ReplyHastageResponse!
  deleteHashtag(id: Int!): String!
}

input CreateUserDto {
  userName: String!
  email: String!
  password: String!
  phone: String!
}

input CreateImagDto {
  name: String!
  breed: String!
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  userName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input CreateNotificationDto {
  content: String!
  userName: String!
}

input CreateMessageDto {
  content: String!
  userName: String!
}